#include<algorithm> // std::find

/*
vector<int> v{0,1,2,3};
v.begin() is 0, v.end() is after 3

 - find: InputIterator find (InputIterator first, InputIterator last, const T& val)
    returns an iterator to the first element in the range[first, last) that compares equal to val.
    If no such element is found, the function returns last
    
 - find_if: InputIterator find_if (InputIterator first, InputIterator last, UnaryPredicate pred)
    returns an iterator to the first element in the range[first, last) for which pred returns true
    If no element is found, returns las
 
 - vector::front
    returns a reference to the first element in the vector
    
  - vector::back
    returns a reference to the last element in the vector
    

*/

int myints[] = { 10, 20, 30, 40 };
  int * p;

  p = std::find (myints, myints+4, 30);
  if (p != myints+4)
    std::cout << "Element found in myints: " << *p << '\n';
  else
    std::cout << "Element not found in myints\n";

  // using std::find with vector and iterator:
  std::vector<int> myvector (myints,myints+4);
  std::vector<int>::iterator it;

  it = find (myvector.begin(), myvector.end(), 30);
  if (it != myvector.end())
    std::cout << "Element found in myvector: " << *it << '\n';
  else
    std::cout << "Element not found in myvector\n";
    
    //////
bool IsOdd (int i) {
  return ((i%2)==1);
}

int main () {
  std::vector<int> myvector;

  myvector.push_back(10);
  myvector.push_back(25);
  myvector.push_back(40);
  myvector.push_back(55);

  std::vector<int>::iterator it = std::find_if (myvector.begin(), myvector.end(), IsOdd);
  std::cout << "The first odd value is " << *it << '\n';

  return 0;
}
//////

myvector.front() -= myvector.back();
